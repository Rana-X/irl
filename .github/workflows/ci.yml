name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_ENV: test
  RESEND_API_KEY: ${{ secrets.RESEND_API_KEY || 'test_key' }}
  FROM_EMAIL: ${{ secrets.FROM_EMAIL || 'test@example.com' }}
  PARTNER_EMAILS: ${{ secrets.PARTNER_EMAILS || 'partner@example.com' }}

jobs:
  test-local:
    name: Run Tests Locally
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: |
        npm install -g eslint
        eslint . --ext .js || true
    
    - name: Run tests with coverage
      run: npm test
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-e2b:
    name: Run Tests in E2B Sandbox
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run E2B Sandbox Tests
      env:
        E2B_API_KEY: ${{ secrets.E2B_API_KEY }}
      run: |
        if [ -n "$E2B_API_KEY" ]; then
          npm run test:sandbox
        else
          echo "E2B_API_KEY not set, skipping sandbox tests"
        fi
      continue-on-error: true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate || true
    
    - name: Run security tests
      run: |
        npm ci
        npx jest tests/security.test.js --coverage=false || true

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [test-local]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
    
    - name: Install Vercel CLI
      run: npm install -g vercel
    
    - name: Deploy to Vercel
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        if [ -n "$VERCEL_TOKEN" ]; then
          vercel --prod --token=$VERCEL_TOKEN --yes
        else
          echo "Vercel token not set, skipping deployment"
        fi
      continue-on-error: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test-local, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Get version from package.json
      id: package-version
      run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.package-version.outputs.VERSION }}
        release_name: Release v${{ steps.package-version.outputs.VERSION }}
        body: |
          ## Changes in this Release
          - Automated release from CI/CD pipeline
          - All tests passing
          - Security scan completed
        draft: false
        prerelease: false
      continue-on-error: true